<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Hexo - Auto deploy use Netlify(自動部署)</title>
    <link href="/2020/12/30/hexo/auto-deploy-netlify/"/>
    <url>/2020/12/30/hexo/auto-deploy-netlify/</url>
    
    <content type="html"><![CDATA[<h2 id="step-1：專案關聯"><a href="#step-1：專案關聯" class="headerlink" title="step 1：專案關聯"></a>step 1：專案關聯</h2><p>在遠端建立<code>repository</code>，<code>GitHub</code>or<code>GitLab</code>皆可。複製遠端專案的<code>ssh</code>，將本地和遠端進行關聯。</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-keyword">cd</span> project<br><br>git remote <span class="hljs-built_in">add</span> origin git@github.<span class="hljs-keyword">com</span>:xxx/xxx.git<br></code></pre></td></tr></table></figure><p>如果指令無法運作，也可以採用笨方法，透過<code>GUI</code>工具<code>(SourceTree)</code>，將遠端專案的<code>clone</code>下來，將本地<code>Hexo</code>專案內容整包丟進去，再推送上去也能完成關聯。</p><h2 id="step-2：commit-amp-push"><a href="#step-2：commit-amp-push" class="headerlink" title="step 2：commit &amp; push"></a>step 2：<code>commit</code> &amp; <code>push</code></h2><p>更改內容後進行<code>commit</code>：</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile">git <span class="hljs-keyword">add</span><span class="bash"> ./</span><br><br>git commit -m <span class="hljs-string">&#x27;commit information&#x27;</span><br></code></pre></td></tr></table></figure><p>推送到遠端：</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs avrasm">git <span class="hljs-keyword">push</span> --<span class="hljs-keyword">set</span>-upstream origin master <span class="hljs-meta"># 設定常用推送分支</span><br><br>git <span class="hljs-keyword">push</span> <span class="hljs-meta"># 日後推送指令</span><br></code></pre></td></tr></table></figure><h2 id="step-3：config設定"><a href="#step-3：config設定" class="headerlink" title="step 3：config設定"></a>step 3：<code>config</code>設定</h2><p>打開最上層的<code>_config.yml</code>，修改設定：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs awk">deploy:<br>  type: git <span class="hljs-comment"># 部署方式</span><br>  repository: https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/wuzhe0912/</span>pittwu-blog.git <span class="hljs-comment"># 關聯 github</span><br>  branch: run-page <span class="hljs-comment"># 部署用 branch</span><br></code></pre></td></tr></table></figure><h2 id="step-4：安裝Hexo部署插件"><a href="#step-4：安裝Hexo部署插件" class="headerlink" title="step 4：安裝Hexo部署插件"></a>step 4：安裝<code>Hexo</code>部署插件</h2><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile">yarn <span class="hljs-keyword">add</span><span class="bash"> hexo-deployer-git</span><br></code></pre></td></tr></table></figure><h2 id="step-5：執行部署指令"><a href="#step-5：執行部署指令" class="headerlink" title="step 5：執行部署指令"></a>step 5：執行部署指令</h2><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">hexo</span> clean  <span class="hljs-comment"># 清除舊的靜態文件</span><br><br>hexo g      <span class="hljs-comment"># 生成新的靜態文件</span><br><br>hexo d      <span class="hljs-comment"># 部署</span><br></code></pre></td></tr></table></figure><p>這時候本地的<code>Hexo</code>打包後資料已推送到遠端的<code>repository</code>。</p><h2 id="step-6：Netlify關聯設定"><a href="#step-6：Netlify關聯設定" class="headerlink" title="step 6：Netlify關聯設定"></a>step 6：<code>Netlify</code>關聯設定</h2><p>在<code>Netlify</code>建立帳號後，登入時會在右側看到<code>New site from Git</code>，接著選你剛剛專案存放的位置，看是<code>GitHub</code>or<code>GitLab</code>，關聯授權完成後，選擇我們剛剛推送上去的<code>repository</code>。</p><p><code>Branch</code>需選擇剛剛<code>_config.yml</code>輸入的<code>branch name</code>，下方<code>command</code>和<code>Publish</code>兩欄則清空，最後點選 <code>Deploy site</code>。</p><p>很快就能在左上角看到<code>Netlify</code>幫我們生成的站點網址，但其中網址名的部分是亂數生成的，可以點選<code>Change site name</code>修改。</p><h2 id="step-7：日後的部署流程"><a href="#step-7：日後的部署流程" class="headerlink" title="step 7：日後的部署流程"></a>step 7：日後的部署流程</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-section"># 1：markdown 書寫筆記後</span><br><span class="hljs-bullet">-</span> 進行 commit<br><span class="hljs-bullet">-</span> 進行 push<br><br><span class="hljs-section"># 2：打包靜態資料準備推送</span><br><span class="hljs-bullet">-</span> hexo clean<br><span class="hljs-bullet">-</span> hexo g<br><span class="hljs-bullet">-</span> hexo d<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Hexo</tag>
      
      <tag>Netlify</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Flask &amp; Django(Basic Install)</title>
    <link href="/2020/12/29/python/flask-django/"/>
    <url>/2020/12/29/python/flask-django/</url>
    
    <content type="html"><![CDATA[<h2 id="Install-Python3"><a href="#Install-Python3" class="headerlink" title="Install Python3"></a>Install Python3</h2><h2 id="Install-Flask"><a href="#Install-Flask" class="headerlink" title="Install Flask"></a>Install Flask</h2><h3 id="建立Demo資料夾，並安裝venv環境"><a href="#建立Demo資料夾，並安裝venv環境" class="headerlink" title="建立Demo資料夾，並安裝venv環境"></a>建立<code>Demo</code>資料夾，並安裝<code>venv</code>環境</h3><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs maxima"><span class="hljs-built_in">mkdir</span> flask-<span class="hljs-built_in">demo</span><br>cd flask-<span class="hljs-built_in">demo</span><br>python3 -m venv venv<br></code></pre></td></tr></table></figure><h3 id="透過pip3安裝flask"><a href="#透過pip3安裝flask" class="headerlink" title="透過pip3安裝flask"></a>透過<code>pip3</code>安裝<code>flask</code></h3><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">pip3 <span class="hljs-keyword">install</span> Flask<br></code></pre></td></tr></table></figure><p>如果終端機提示<code>pip3</code>版本太舊需要更新，更新指令：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">python3 -m pip <span class="hljs-keyword">install</span> <span class="hljs-comment">--upgrade pip</span><br></code></pre></td></tr></table></figure><h3 id="快速建立檔案確認flask是否安裝成功"><a href="#快速建立檔案確認flask是否安裝成功" class="headerlink" title="快速建立檔案確認flask是否安裝成功"></a>快速建立檔案確認<code>flask</code>是否安裝成功</h3><p>建立一個<code>hello.py</code>的檔案</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-keyword">vim</span> hello.<span class="hljs-keyword">py</span><br></code></pre></td></tr></table></figure><p>並在其中填入以下內容：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Flask<br>app = Flask(__name__)<br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/&#x27;</span></span>)</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">hello_world</span>():</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;Hello, World!&#x27;</span><br></code></pre></td></tr></table></figure><p>設定入口檔案</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-builtin-name">export</span> <span class="hljs-attribute">FLASK_APP</span>=hello.py<br></code></pre></td></tr></table></figure><p>運行</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile">flask <span class="hljs-keyword">run</span><br></code></pre></td></tr></table></figure><p>如果運行正常，這時會看到本地的<code>5000 port</code>被指派調用</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">Running</span> <span class="hljs-literal">on</span> http://127.0.0.1:5000/ (Press CTRL+C to quit)<br></code></pre></td></tr></table></figure><p>在瀏覽器中打開本地網址，確認文字是否被正常渲染</p><h2 id="Install-Django"><a href="#Install-Django" class="headerlink" title="Install Django"></a>Install Django</h2><h2 id="Install-MySQL"><a href="#Install-MySQL" class="headerlink" title="Install MySQL"></a>Install MySQL</h2>]]></content>
    
    
    
    <tags>
      
      <tag>Python</tag>
      
      <tag>Flask</tag>
      
      <tag>Django</tag>
      
      <tag>MySQL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>VSCode 設定(Workspace)</title>
    <link href="/2020/12/14/vscode/vscode-setting/"/>
    <url>/2020/12/14/vscode/vscode-setting/</url>
    
    <content type="html"><![CDATA[<h2 id="VSCode-setting"><a href="#VSCode-setting" class="headerlink" title="VSCode setting"></a>VSCode setting</h2><h3 id="path-gt-Code-Preferences-settings-Workspace"><a href="#path-gt-Code-Preferences-settings-Workspace" class="headerlink" title="path =&gt; Code/Preferences/settings/Workspace"></a><code>path =&gt; Code/Preferences/settings/Workspace</code></h3><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs json">&#123;<br>  <span class="hljs-attr">&quot;editor.fontSize&quot;</span>: <span class="hljs-number">16</span>,<br>  <span class="hljs-comment">// --- Eslint ---</span><br>  <span class="hljs-attr">&quot;editor.formatOnSave&quot;</span>: <span class="hljs-literal">true</span>,  <span class="hljs-comment">// 存檔後自動格式化</span><br>  <span class="hljs-attr">&quot;eslint.alwaysShowStatus&quot;</span>: <span class="hljs-literal">true</span>,<br>  <span class="hljs-attr">&quot;eslint.validate&quot;</span>: [<br>    <span class="hljs-string">&quot;javascript&quot;</span>,<br>    <span class="hljs-string">&quot;javascriptreact&quot;</span>,<br>    <span class="hljs-string">&quot;typescript&quot;</span>,<br>    <span class="hljs-string">&quot;typescriptreact&quot;</span>,<br>    <span class="hljs-string">&quot;vue&quot;</span>,<br>  ],<br>  <span class="hljs-attr">&quot;editor.codeActionsOnSave&quot;</span>: &#123;<br>    <span class="hljs-attr">&quot;source.fixAll.eslint&quot;</span>: <span class="hljs-literal">true</span> <span class="hljs-comment">// 存檔時自動排版</span><br>  &#125;,<br>  <span class="hljs-comment">// --- Prettier ---</span><br>  <span class="hljs-attr">&quot;[javascript, typescript]&quot;</span>: &#123;<br>    <span class="hljs-attr">&quot;editor.formatOnSave&quot;</span>: <span class="hljs-literal">true</span><br>  &#125;,<br>  <span class="hljs-comment">// 字與括號保有空格</span><br>  <span class="hljs-attr">&quot;prettier.bracketSpacing&quot;</span>: <span class="hljs-literal">true</span>,<br>  <span class="hljs-attr">&quot;prettier.jsxSingleQuote&quot;</span>: <span class="hljs-literal">true</span>,<br>  <span class="hljs-comment">// Vue3 snippets</span><br>  <span class="hljs-attr">&quot;vue3snippets.enable-compile-vue-file-on-did-save-code&quot;</span>: <span class="hljs-literal">true</span>,<br>  <span class="hljs-attr">&quot;vue3snippets.singleQuote&quot;</span>: <span class="hljs-literal">true</span>,<br>  <span class="hljs-attr">&quot;vue3snippets.printWidth&quot;</span>: <span class="hljs-number">80</span>,<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="vue-cli-package-prettier-setting"><a href="#vue-cli-package-prettier-setting" class="headerlink" title="vue-cli package prettier setting"></a>vue-cli package prettier setting</h2><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs actionscript"><span class="hljs-string">&quot;eslintConfig&quot;</span>: &#123;<br>  <span class="hljs-string">&quot;root&quot;</span>: <span class="hljs-literal">true</span>,<br>  <span class="hljs-string">&quot;env&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;node&quot;</span>: <span class="hljs-literal">true</span><br>  &#125;,<br>  <span class="hljs-string">&quot;extends&quot;</span>: [<br>    <span class="hljs-string">&quot;plugin:vue/vue3-essential&quot;</span>,<br>    <span class="hljs-string">&quot;eslint:recommended&quot;</span>,<br>    <span class="hljs-string">&quot;@vue/typescript/recommended&quot;</span>,<br>    <span class="hljs-string">&quot;@vue/prettier&quot;</span>,<br>    <span class="hljs-string">&quot;@vue/prettier/@typescript-eslint&quot;</span><br>  ],<br>  <span class="hljs-string">&quot;parserOptions&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;ecmaVersion&quot;</span>: <span class="hljs-number">2020</span><br>  &#125;,<br>  <span class="hljs-string">&quot;rules&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;prettier/prettier&quot;</span>: [<br>      <span class="hljs-string">&quot;error&quot;</span>,<br>      &#123;<br>        <span class="hljs-string">&quot;printWidth&quot;</span>: <span class="hljs-number">80</span>,<br>        <span class="hljs-string">&quot;singleQuote&quot;</span>: <span class="hljs-literal">true</span>,<br>        <span class="hljs-string">&quot;bracketSpacing&quot;</span>: <span class="hljs-literal">true</span>,<br>        <span class="hljs-string">&quot;trailingComma&quot;</span>: <span class="hljs-string">&quot;all&quot;</span><br>      &#125;<br>    ]<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>VSCode</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Nuxt.js - 1(Project Initial)</title>
    <link href="/2020/12/14/vue/nuxt/initial/"/>
    <url>/2020/12/14/vue/nuxt/initial/</url>
    
    <content type="html"><![CDATA[<h2 id="Initial-Nuxt-js-Project"><a href="#Initial-Nuxt-js-Project" class="headerlink" title="Initial Nuxt.js Project"></a>Initial Nuxt.js Project</h2><h3 id="1-Build-Gitlab-repository"><a href="#1-Build-Gitlab-repository" class="headerlink" title="1. Build Gitlab repository"></a>1. <code>Build Gitlab repository</code></h3><h3 id="2-Local-environment-install-Nuxt-js-Project"><a href="#2-Local-environment-install-Nuxt-js-Project" class="headerlink" title="2. Local environment install Nuxt.js Project"></a>2. <code>Local environment install Nuxt.js Project</code></h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment"># yarn</span><br><br>yarn <span class="hljs-keyword">create</span> nuxt-app &lt;<span class="hljs-keyword">project</span>-<span class="hljs-keyword">name</span>&gt;<br></code></pre></td></tr></table></figure><figure class="highlight dsconfig"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs dsconfig"><span class="hljs-comment"># npx</span><br><br><span class="hljs-string">npx</span> <span class="hljs-built_in">create-nuxt-app</span> &lt;<span class="hljs-string">project-name</span>&gt;<br></code></pre></td></tr></table></figure><h3 id="3-Push-to-remote-Gitlab-repo"><a href="#3-Push-to-remote-Gitlab-repo" class="headerlink" title="3. Push to remote Gitlab repo"></a>3. <code>Push to remote Gitlab repo</code></h3><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile">git remote <span class="hljs-keyword">add</span><span class="bash"> origin git@gitlab.com:xxx/xxx.git</span><br>git <span class="hljs-keyword">add</span><span class="bash"> .</span><br>git commit -m <span class="hljs-string">&quot;initial commit&quot;</span><br>git branch dev<br>git checkout dev<br>git push -u origin dev<br></code></pre></td></tr></table></figure><h2 id="How-to-fix-push-error"><a href="#How-to-fix-push-error" class="headerlink" title="How to fix push error?"></a>How to fix push error?</h2><ul><li><code>example1</code>：</li></ul><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs vim">GitLa<span class="hljs-variable">b:</span> The project you were looking <span class="hljs-keyword">for</span> could not <span class="hljs-keyword">be</span> found.<br>fata<span class="hljs-variable">l:</span> Could not <span class="hljs-keyword">read</span> from remote repository.<br></code></pre></td></tr></table></figure><ul><li><code>reason</code>：<code>Remote Gitlab is can&#39;t found my repo</code>，會出現這個狀況有兩種情境：尚未加入<code>SSH Key</code>或<code>SSH Key</code>正確，但需要重新更新遠端名稱。</li><li><code>solution</code>：檢查本機公鑰是否已正常加入<code>Gitlab</code></li></ul><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs angelscript">ssh -T <span class="hljs-symbol">git@</span>gitlab.com<br></code></pre></td></tr></table></figure><ul><li>如果忘記密碼或是尚未設定<code>SSH Key</code>，導致出現<code>Permission Denied (publickey)</code>，則重跑以下流程：</li></ul><h3 id="1-生成SSH-Key："><a href="#1-生成SSH-Key：" class="headerlink" title="1. 生成SSH Key："></a>1. 生成<code>SSH Key</code>：</h3><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs excel">ssh-keygen -<span class="hljs-built_in">t</span> rsa -C <span class="hljs-string">&quot;YOUR EMAIL&quot;</span><br></code></pre></td></tr></table></figure><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">Enter <span class="hljs-built_in">file</span> <span class="hljs-keyword">in</span> which <span class="hljs-built_in">to</span> save <span class="hljs-keyword">the</span> key<span class="hljs-comment"> // 可enter忽略</span><br><br>Enter passphrase (<span class="hljs-literal">empty</span> <span class="hljs-keyword">for</span> no passphrase):<span class="hljs-comment"> // 設定私人密碼，需要自己記住</span><br></code></pre></td></tr></table></figure><h3 id="2-進入SSH："><a href="#2-進入SSH：" class="headerlink" title="2. 進入SSH："></a>2. 進入<code>SSH</code>：</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs awk">cd ~<span class="hljs-regexp">/.ssh/</span><br><br>id_rsa =&gt; 私鑰<br>id_rsa.pub =&gt; 公鑰 <span class="hljs-regexp">//</span> 使用 vscode 將公鑰的檔案打開，複製裡面的內容<br></code></pre></td></tr></table></figure><h3 id="3-回到Gitlab操作路徑："><a href="#3-回到Gitlab操作路徑：" class="headerlink" title="3. 回到Gitlab操作路徑："></a>3. 回到<code>Gitlab</code>操作路徑：</h3><ul><li>點選右上角圖像<code>setting</code></li><li>點擊左側<code>SSH Keys</code></li><li>將剛剛複製的內容貼到中間的輸入框，並點擊下方的<code>add key</code></li></ul><h3 id="4-回到終端機，再次輸入ssh-T-git-gitlab-com，這時會要求你輸入剛剛設定的私人密碼，成功後會看到下面文字："><a href="#4-回到終端機，再次輸入ssh-T-git-gitlab-com，這時會要求你輸入剛剛設定的私人密碼，成功後會看到下面文字：" class="headerlink" title="4. 回到終端機，再次輸入ssh -T git@gitlab.com，這時會要求你輸入剛剛設定的私人密碼，成功後會看到下面文字："></a>4. 回到終端機，再次輸入<code>ssh -T git@gitlab.com</code>，這時會要求你輸入剛剛設定的私人密碼，成功後會看到下面文字：</h3><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs autoit">Welcome <span class="hljs-keyword">to</span> GitLab, <span class="hljs-symbol">@Your_name</span>!<br></code></pre></td></tr></table></figure><h3 id="5-如果仍出現下面的error："><a href="#5-如果仍出現下面的error：" class="headerlink" title="5. 如果仍出現下面的error："></a>5. 如果仍出現下面的<code>error</code>：</h3><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs groovy"><span class="hljs-attr">remote:</span> The project you were looking <span class="hljs-keyword">for</span> could not be found.<br><span class="hljs-attr">fatal:</span> repository <span class="hljs-string">&#x27;https://gitlab.com/Your_name/Your_project.git/&#x27;</span> not found<br></code></pre></td></tr></table></figure><h3 id="6-代表需要更新並重配對一次遠端名稱："><a href="#6-代表需要更新並重配對一次遠端名稱：" class="headerlink" title="6. 代表需要更新並重配對一次遠端名稱："></a>6. 代表需要更新並重配對一次遠端名稱：</h3><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">git remote <span class="hljs-keyword">rename</span> origin <span class="hljs-built_in">old</span>-origin<br>git remote <span class="hljs-keyword">add</span> origin git@gitlab.com:Your_name/Your_project.git<br></code></pre></td></tr></table></figure><p><code>It&#39;s Done.</code></p>]]></content>
    
    
    
    <tags>
      
      <tag>Nuxt.js</tag>
      
      <tag>GCP</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Vue3 Composition API</title>
    <link href="/2020/11/13/vue/vue3/basic/"/>
    <url>/2020/11/13/vue/vue3/basic/</url>
    
    <content type="html"><![CDATA[<h2 id="setup"><a href="#setup" class="headerlink" title="setup()"></a>setup()</h2><p>在<code>Vue3</code>中不再使用<code>data()</code>，而是改用<code>setup()</code>函數來進行包裹，並在末尾透過<code>return</code>的方式，丟出需要的資料，讓<code>template</code>可以應用，格式如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>  <span class="hljs-function"><span class="hljs-title">setup</span>(<span class="hljs-params"></span>)</span> &#123;<br>    <span class="hljs-keyword">return</span> &#123;&#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="ref"><a href="#ref" class="headerlink" title="ref()"></a>ref()</h2><p>為了讓資料成功渲染在字符串模板上，<code>Vue3</code>提供主要兩種寫法，第一個就是<code>ref</code>：</p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;pug&quot;</span>&gt;</span></span><br><span class="xml">.wrap </span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">text</span> &#125;&#125;</span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></span><br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><br><span class="javascript"><span class="hljs-keyword">import</span> &#123; ref &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span></span><br><br><span class="javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span><br><span class="javascript">  <span class="hljs-function"><span class="hljs-title">setup</span>(<span class="hljs-params"></span>)</span> &#123;</span><br><span class="javascript">    <span class="hljs-keyword">const</span> text = ref(<span class="hljs-string">&#x27;Hello Vue3!&#x27;</span>)</span><br><br><span class="javascript">    <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;</span><br><span class="javascript">      text.value = <span class="hljs-string">&#x27;Hello Change Pitt&#x27;</span></span><br>    &#125;, 1500)<br>  <br><span class="javascript">    <span class="hljs-keyword">return</span> &#123; text &#125;</span><br>  &#125;<br>&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>在上面的程式碼中，我們可以看到，使用<code>ref</code>前須先做引入的動作，並且聲明變數時，統一使用<code>const</code>，並將要指派的資料包在<code>ref()</code>中。</p><p>需要注意的是，如果我們要重新指派變數為新的值，如上圖<code>setTimeout()</code>，則需要加上<code>.value</code>。</p><p>最後將建立的變數<code>return</code>出去。</p><h2 id="reactive"><a href="#reactive" class="headerlink" title="reactive()"></a>reactive()</h2><p>和<code>ref</code>與之相對的，則是另一個語法<code>reactive</code>，倘若今天有多筆資料的狀況下，<code>ref</code>的寫法，在<code>return</code>時同樣需要書寫對應的多筆資料，相對會較為麻煩，因此可以透過<code>reactive</code>來改寫：</p><figure class="highlight pf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs pf"><span class="hljs-variable">&lt;template lang=&quot;pug&quot;&gt;</span><br>.wrap<br>  div &#123;&#123; <span class="hljs-keyword">state</span>.text &#125;&#125;<br>  div &#123;&#123; <span class="hljs-keyword">state</span>.num &#125;&#125;<br>  div &#123;&#123; <span class="hljs-keyword">state</span>.name &#125;&#125;<br>&lt;/template&gt;<br></code></pre></td></tr></table></figure><figure class="highlight pf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs pf"><span class="hljs-variable">&lt;script&gt;</span><br>import &#123; reactive &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vue&quot;</span>;<br><br>export <span class="hljs-keyword">default</span> &#123;<br>  setup() &#123;<br>    <span class="hljs-keyword">const</span> <span class="hljs-keyword">state</span> = reactive(&#123;<br>      text: &#x27;Player&#x27;,<br>      num: <span class="hljs-number">12</span>,<br>      name: &#x27;Pitt&#x27;,<br>    &#125;);<br><br>    <span class="hljs-built_in">set</span>Timeout(() =&gt; &#123;<br>      <span class="hljs-keyword">state</span>.num = <span class="hljs-number">4</span>;<br>    &#125;, <span class="hljs-number">1500</span>);<br><br>    return &#123; <span class="hljs-keyword">state</span> &#125;;<br>  &#125;,<br>&#125;;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><p>同樣是要引入<code>reactive</code>的語法，書寫時先透過<code>const</code>聲明一個變數，再用<code>reactive</code>方法包裹資料，但需要注意<code>reactive</code>內僅接受物件或陣列的格式。</p><p>因為已透過<code>state</code>(可自行命名)來包裹多筆資料，因此在調用資料時(無論是<code>template or script</code>)都需添加<code>state.</code>，也就是過往物件的呈現形式，而<code>return</code>時僅需要回傳<code>state</code>即可。</p><h2 id="toRefs"><a href="#toRefs" class="headerlink" title="toRefs()"></a>toRefs()</h2><p>但是在<code>template</code>上，如果我們希望能更精簡一些，不要使用<code>object.value</code>的呈現方式的話，可以透過<code>toRefs</code>來進行解構：</p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;pug&quot;</span>&gt;</span></span><br><span class="xml">.wrap</span><br><span class="xml">  div </span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">text</span> &#125;&#125;</span><br><span class="xml">  div </span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">num</span> &#125;&#125;</span><br><span class="xml">  div </span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">name</span> &#125;&#125;</span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></span><br></code></pre></td></tr></table></figure><figure class="highlight pf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs pf"><span class="hljs-variable">&lt;script&gt;</span><br>import &#123; reactive, <span class="hljs-keyword">to</span>Refs &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vue&quot;</span>;<br><br>export <span class="hljs-keyword">default</span> &#123;<br>  setup() &#123;<br>    <span class="hljs-keyword">const</span> <span class="hljs-keyword">state</span> = reactive(&#123;<br>      text: &#x27;Player&#x27;,<br>      num: <span class="hljs-number">12</span>,<br>      name: &#x27;Pitt&#x27;,<br>    &#125;);<br><br>    <span class="hljs-built_in">set</span>Timeout(() =&gt; &#123;<br>      <span class="hljs-keyword">state</span>.num = <span class="hljs-number">4</span>;<br>    &#125;, <span class="hljs-number">1500</span>);<br><br>    return &#123; ...<span class="hljs-keyword">to</span>Refs(<span class="hljs-keyword">state</span>) &#125;;<br>  &#125;,<br>&#125;;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><p>寫法上較為單純，僅是引入，並在<code>return</code>時進行包裹。</p>]]></content>
    
    
    
    <tags>
      
      <tag>Vue.js</tag>
      
      <tag>Vue3</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Vue 語法觀念補充</title>
    <link href="/2020/10/17/vue/vue2/basic/"/>
    <url>/2020/10/17/vue/vue2/basic/</url>
    
    <content type="html"><![CDATA[<h2 id="Computed-amp-Methods"><a href="#Computed-amp-Methods" class="headerlink" title="Computed &amp; Methods"></a><code>Computed &amp; Methods</code></h2><p><code>computed</code>會依據計算的資料進行緩存，只要資料的值沒有被更改，<code>computed</code>即不會被重新計算。<br><code>methods</code>沒有緩存的特性，每次都會重新執行，但可以傳入參數進行處理。</p>]]></content>
    
    
    
    <tags>
      
      <tag>Vue.js</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ES6 - ES Module(模組)</title>
    <link href="/2020/09/01/javascript/es6/es-module/"/>
    <url>/2020/09/01/javascript/es6/es-module/</url>
    
    <content type="html"><![CDATA[<h2 id="模組化"><a href="#模組化" class="headerlink" title="模組化"></a>模組化</h2><p>現代<code>JS</code>開發，多已採用引入<code>component</code>的形式來組成專案結構。</p><h3 id="導出"><a href="#導出" class="headerlink" title="導出"></a>導出</h3><p>建立<code>tool.js</code>這個<code>component</code>並導出：</p><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs coffeescript">const add = <span class="hljs-function">(<span class="hljs-params">(item, subItem)</span> =&gt;</span> item + subItem)<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> add<br></code></pre></td></tr></table></figure><p>這邊需注意，若非使用打包工具建立的環境下，一般<code>script</code>無法判別<code>module</code>，需再加上<code>type</code>：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;module&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;./js/index.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="導入"><a href="#導入" class="headerlink" title="導入"></a>導入</h3><p>在需要使用的頁面引入<code>component</code>：</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">import <span class="hljs-built_in">add</span> <span class="hljs-built_in">from</span> <span class="hljs-string">&#x27;./tools.js&#x27;</span><br><br>console.<span class="hljs-built_in">log</span>(<span class="hljs-built_in">add</span>(<span class="hljs-number">5</span>, <span class="hljs-number">12</span>))<span class="hljs-comment"> // 印出 17</span><br></code></pre></td></tr></table></figure><h2 id="直接導出資料寫法"><a href="#直接導出資料寫法" class="headerlink" title="直接導出資料寫法"></a>直接導出資料寫法</h2><p>建立資料並導出：</p><figure class="highlight delphi"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs delphi"><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-keyword">name</span> = <span class="hljs-string">&#x27;Pitt&#x27;</span><br></code></pre></td></tr></table></figure><p>使用解構的方式引入：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">import</span> &#123; <span class="hljs-type">name</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./tools.js&#x27;</span><br><br>console.log(<span class="hljs-type">name</span>) // 印出 Pitt<br></code></pre></td></tr></table></figure><h2 id="單複數差異"><a href="#單複數差異" class="headerlink" title="單複數差異"></a>單複數差異</h2><p><code>export default</code>僅能導出一個，但<code>export</code>可以導出複數個，同時<code>export</code>僅能使用變數的形式導出：</p><ul><li>導出 example 1：</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> name = <span class="hljs-string">&#x27;Pitt&#x27;</span><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> remove = <span class="hljs-function">(<span class="hljs-params">item, subItem</span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">return</span> item - subItem<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>導出 example 2：</li></ul><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xquery">const<span class="hljs-built_in"> name</span> = <span class="hljs-string">&#x27;Pitt&#x27;</span><br><br>const<span class="hljs-built_in"> remove</span> = (<span class="hljs-type">item</span>, subItem) =&gt; &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-type">item</span> - subItem<br>&#125;<br><br>export &#123;<span class="hljs-built_in"> name</span>,<span class="hljs-built_in"> remove</span> &#125;<br></code></pre></td></tr></table></figure><ul><li>導入：</li></ul><figure class="highlight sqf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sqf">import &#123; <span class="hljs-built_in">name</span>, remove &#125;  <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./tools.js&#x27;</span><br><br>console.<span class="hljs-built_in">log</span>(<span class="hljs-built_in">name</span>) <span class="hljs-comment">// 印出 Pitt</span><br>console.<span class="hljs-built_in">log</span>(remove(<span class="hljs-number">10</span>, <span class="hljs-number">2</span>)) <span class="hljs-comment">// 印出 8</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>JavaScript</tag>
      
      <tag>ES6</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ES6 - Template Literals(樣板字面值)</title>
    <link href="/2020/09/01/javascript/es6/template-literals/"/>
    <url>/2020/09/01/javascript/es6/template-literals/</url>
    
    <content type="html"><![CDATA[<h2 id="過往寫法"><a href="#過往寫法" class="headerlink" title="過往寫法"></a>過往寫法</h2><p>需要透過<code>+</code>號還有空格來明確區分參數和字串：</p><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs coffeescript">const playerData = <span class="hljs-function"><span class="hljs-params">(name, job)</span> =&gt;</span> &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;玩家名稱：&#x27;</span> + name + <span class="hljs-string">&#x27;，職業：&#x27;</span> + job<br>&#125;<br><br><span class="hljs-built_in">console</span>.log(playerData(<span class="hljs-string">&#x27;Pitt&#x27;</span>, <span class="hljs-string">&#x27;戰士&#x27;</span>))<br></code></pre></td></tr></table></figure><h2 id="樣板字面值寫法"><a href="#樣板字面值寫法" class="headerlink" title="樣板字面值寫法"></a>樣板字面值寫法</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 將 &#x27;&#x27; 改為 ``，參數則透過 $&#123;&#125; 進行包裹</span><br><br><span class="hljs-keyword">const</span> playerData = <span class="hljs-function">(<span class="hljs-params">name, job</span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-string">`玩家名稱：<span class="hljs-subst">$&#123;name&#125;</span>，職業：<span class="hljs-subst">$&#123;job&#125;</span>`</span><br>&#125;<br><br><span class="hljs-built_in">console</span>.log(playerData(<span class="hljs-string">&#x27;Pitt&#x27;</span>, <span class="hljs-string">&#x27;戰士&#x27;</span>))<br></code></pre></td></tr></table></figure><h2 id="換行寫法"><a href="#換行寫法" class="headerlink" title="換行寫法"></a>換行寫法</h2><p>支援換行功能，當樣板字面值為換行時，顯示時也同時會換行：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> playerData = <span class="hljs-function">(<span class="hljs-params">name, job</span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-string">`</span><br><span class="hljs-string">  玩家名稱：<span class="hljs-subst">$&#123;name&#125;</span></span><br><span class="hljs-string">  ，職業：<span class="hljs-subst">$&#123;job&#125;</span></span><br><span class="hljs-string">  `</span><br>&#125;<br><br><span class="hljs-built_in">console</span>.log(playerData(<span class="hljs-string">&#x27;Pitt&#x27;</span>, <span class="hljs-string">&#x27;戰士&#x27;</span>))<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>JavaScript</tag>
      
      <tag>ES6</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ES6 - Function Default(預設參數)</title>
    <link href="/2020/09/01/javascript/es6/function-default/"/>
    <url>/2020/09/01/javascript/es6/function-default/</url>
    
    <content type="html"><![CDATA[<h2 id="傳統的傳值"><a href="#傳統的傳值" class="headerlink" title="傳統的傳值"></a>傳統的傳值</h2><p>假設建立一組<code>function</code>將陣列中的每個元素轉為<code>string</code>：</p><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs smali">const ArrayToString = (array) =&gt; &#123;<br>  if(!array)<span class="hljs-built_in"> array </span>= []<br> <span class="hljs-built_in"> const </span>mapString = array.map((item) =&gt; &#123;<br>   <span class="hljs-built_in"> return </span>item.toString()<br>  &#125;)<br> <span class="hljs-built_in"> return </span>mapString<br>&#125;<br><br>console.log(ArrayToString([1, 2, 3]))<br></code></pre></td></tr></table></figure><p>如果<code>API</code>送的資料為空陣列，則會造成執行<code>map()</code>時跳<code>error</code>，因此過往需要在<code>function</code>中添加<code>if</code>來進行判斷。</p><h2 id="設定default值"><a href="#設定default值" class="headerlink" title="設定default值"></a>設定<code>default</code>值</h2><p>透過設定<code>default</code>值，則可以省略<code>if</code>判斷式，並且會回傳預設值，不至於報錯卡住無法執行。：</p><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs coffeescript">const ArrayToString = <span class="hljs-function"><span class="hljs-params">(array = [])</span> =&gt;</span> &#123;<br>  const mapString = array.map(<span class="hljs-function"><span class="hljs-params">(item)</span> =&gt;</span> &#123;<br>    <span class="hljs-keyword">return</span> item.toString()<br>  &#125;)<br>  <span class="hljs-keyword">return</span> mapString<br>&#125;<br><br><span class="hljs-built_in">console</span>.log(ArrayToString())<br></code></pre></td></tr></table></figure><p>簡寫寫法：</p><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs coffeescript">const ArrayToString = <span class="hljs-function"><span class="hljs-params">(array = [])</span> =&gt;</span> &#123;<br>  const mapString = array.map(<span class="hljs-function"><span class="hljs-params">(item)</span> =&gt;</span> item.toString())<br>  <span class="hljs-keyword">return</span> mapString<br>&#125;<br><br><span class="hljs-built_in">console</span>.log(ArrayToString([<span class="hljs-number">2</span>, <span class="hljs-number">4</span>, <span class="hljs-number">6</span>]))<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>JavaScript</tag>
      
      <tag>ES6</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ES6 - Arrow Function(箭頭函式/函數)</title>
    <link href="/2020/09/01/javascript/es6/arrow-function/"/>
    <url>/2020/09/01/javascript/es6/arrow-function/</url>
    
    <content type="html"><![CDATA[<h2 id="傳統函式與箭頭函式寫法比較"><a href="#傳統函式與箭頭函式寫法比較" class="headerlink" title="傳統函式與箭頭函式寫法比較"></a>傳統函式與箭頭函式寫法比較</h2><ul><li><code>function</code></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// index.html</span><br>&lt;span <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;click1&quot;</span>&gt;click1&lt;/span&gt;<br><br><span class="hljs-comment">// index.js</span><br><span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&#x27;.click1&#x27;</span>).addEventListener(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;click1&#x27;</span>)<br>&#125;)<br></code></pre></td></tr></table></figure><ul><li><code>arrow function</code></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// index.html</span><br>&lt;span <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;click2&quot;</span>&gt;click2&lt;/span&gt;<br><br><span class="hljs-comment">// index.js</span><br><span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&#x27;.click2&#x27;</span>).addEventListener(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;click2&#x27;</span>)<br>&#125;)<br></code></pre></td></tr></table></figure><p>將過往<code>function</code>改為<code>=&gt;</code>。</p><h2 id="this指向"><a href="#this指向" class="headerlink" title="this指向"></a><code>this</code>指向</h2><p>需要注意的是，傳統函式中，<code>this</code>會指向<code>DOM</code>元素本身：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&#x27;.click1&#x27;</span>).addEventListener(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>) <span class="hljs-comment">// 印出整個 a 標籤</span><br>&#125;)<br></code></pre></td></tr></table></figure><p>但是箭頭函式中，<code>this</code>指向會往上一層跑到全域環境，所以也可以理解為在<code>arrow function</code>中沒有<code>this</code>。</p><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs coffeescript"><span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&#x27;.click2&#x27;</span>).addEventListener(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> &#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>) <span class="hljs-regexp">//</span> 印出整個 <span class="hljs-built_in">window</span> 物件<br>&#125;)<br></code></pre></td></tr></table></figure><p>因此如果需要找到該<code>DOM</code>元素，需要透過傳值的方式。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&#x27;.click2&#x27;</span>).addEventListener(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">e</span>) =&gt;</span> &#123;<br>  <span class="hljs-built_in">console</span>.log(e.target) <span class="hljs-comment">// // 印出 a 標籤</span><br>&#125;)<br></code></pre></td></tr></table></figure><h2 id="變數指定"><a href="#變數指定" class="headerlink" title="變數指定"></a>變數指定</h2><p>函式若在前方有宣告變數的情況下，可以簡寫成<code>arrow function</code>。但需要注意，若前方沒有變數指定，則無法改寫為<code>arrow function</code>：</p><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs coffeescript">const add = <span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> &#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;test&#x27;</span>)<br>&#125;<br><br>add()<br></code></pre></td></tr></table></figure><p>傳值的寫法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> add = <span class="hljs-function">(<span class="hljs-params">val, subVal</span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">return</span> val + subVal<br>&#125;<br><br><span class="hljs-built_in">console</span>.log(add(<span class="hljs-number">4</span>, <span class="hljs-number">14</span>)) <span class="hljs-comment">// 印出 18</span><br></code></pre></td></tr></table></figure><p>若<code>return</code>僅一行的情況下，還可簡寫成：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> add = <span class="hljs-function">(<span class="hljs-params">val, subVal</span>) =&gt;</span> val + subVal<br><br><span class="hljs-built_in">console</span>.log(add(<span class="hljs-number">2</span>, <span class="hljs-number">8</span>)) <span class="hljs-comment">// 印出 10</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>JavaScript</tag>
      
      <tag>ES6</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ES6 - Destructuring(解構賦值)</title>
    <link href="/2020/09/01/javascript/es6/destructuring/"/>
    <url>/2020/09/01/javascript/es6/destructuring/</url>
    
    <content type="html"><![CDATA[<h2 id="傳統取值的方法"><a href="#傳統取值的方法" class="headerlink" title="傳統取值的方法"></a>傳統取值的方法</h2><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs haskell"><span class="hljs-title">const</span> <span class="hljs-class"><span class="hljs-keyword">data</span> = &#123;</span><br><span class="hljs-class">  <span class="hljs-title">player</span>: &#x27;<span class="hljs-type">Pitt</span>&#x27;,</span><br><span class="hljs-class">  <span class="hljs-title">str</span>: 20,</span><br><span class="hljs-class">  <span class="hljs-title">agi</span>: 30</span><br><span class="hljs-class">&#125;</span><br><br><span class="hljs-title">console</span>.log(<span class="hljs-class"><span class="hljs-keyword">data</span>.str) // 印出 20</span><br></code></pre></td></tr></table></figure><h2 id="解構的做法"><a href="#解構的做法" class="headerlink" title="解構的做法"></a>解構的做法</h2><figure class="highlight sqf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs sqf">const data = &#123;<br>  <span class="hljs-built_in">player</span>: <span class="hljs-string">&#x27;Pitt&#x27;</span>,<br>  <span class="hljs-built_in">str</span>: <span class="hljs-number">20</span>,<br>  agi: <span class="hljs-number">30</span><br>&#125;<br><br>const &#123; <span class="hljs-built_in">player</span>, <span class="hljs-built_in">str</span>, agi &#125; = data<br><br>console.<span class="hljs-built_in">log</span>(<span class="hljs-built_in">player</span>, <span class="hljs-built_in">str</span>, agi) <span class="hljs-comment">// Pitt 20 30</span><br></code></pre></td></tr></table></figure><p>透過<code>key</code>將物件中的資料解構出來。</p><h2 id="將物件嵌進物件"><a href="#將物件嵌進物件" class="headerlink" title="將物件嵌進物件"></a>將物件嵌進物件</h2><ul><li>若有<code>a</code>物件，希望放入<code>b</code>物件中，也可透過解構的方式：</li></ul><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs haskell"><span class="hljs-title">const</span> <span class="hljs-class"><span class="hljs-keyword">data</span> = &#123;</span><br><span class="hljs-class">  <span class="hljs-title">player</span>: &#x27;<span class="hljs-type">Pitt</span>&#x27;,</span><br><span class="hljs-class">  <span class="hljs-title">str</span>: 20,</span><br><span class="hljs-class">  <span class="hljs-title">agi</span>: 30,</span><br><span class="hljs-class">&#125;</span><br><br><span class="hljs-title">const</span> playerData = &#123;<br>  <span class="hljs-class"><span class="hljs-keyword">data</span>,</span><br>  newPlayer: &#x27;<span class="hljs-type">Min&#x27;</span>,<br>&#125;<br><br><span class="hljs-title">console</span>.log(playerData)<br></code></pre></td></tr></table></figure><ul><li>印出以下展開結果：</li></ul><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs less">&#123;<br>  <span class="hljs-attribute">data</span>: &#123;<br>    <span class="hljs-attribute">player</span>: <span class="hljs-string">&#x27;Pitt&#x27;</span>,<br>    <span class="hljs-attribute">str</span>: <span class="hljs-number">20</span>,<br>    <span class="hljs-attribute">agi</span>: <span class="hljs-number">30</span>,<br>  &#125;,<br>  <span class="hljs-attribute">newPlayer</span>: <span class="hljs-string">&#x27;Min&#x27;</span>,<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>JavaScript</tag>
      
      <tag>ES6</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ES6 - Scope(作用域)</title>
    <link href="/2020/09/01/javascript/es6/scope/"/>
    <url>/2020/09/01/javascript/es6/scope/</url>
    
    <content type="html"><![CDATA[<h2 id="var"><a href="#var" class="headerlink" title="var"></a>var</h2><p>在<code>ES6</code>之前，過往的變數宣告方式，採用<code>var</code>，但其本身容易污染全域環境。</p><ul><li>example 1：</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">if</span> (<span class="hljs-literal">true</span>) &#123;<br>  <span class="hljs-keyword">var</span> name = <span class="hljs-string">&#x27;Pitt&#x27;</span><br>&#125;<br><span class="hljs-built_in">console</span>.log(name) <span class="hljs-comment">// 印出 Pitt</span><br></code></pre></td></tr></table></figure><ul><li>example 2：</li></ul><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs smali">var<span class="hljs-built_in"> array </span>= [2, 4, 6]<br>if (true) &#123;<br>  var<span class="hljs-built_in"> array </span>= [2]<br>&#125;<br>console.log(array) // 印出 [2]<br></code></pre></td></tr></table></figure><p>承前面的案例，可以看到<code>var</code>宣告的變數，衝出判斷式的界線，污染了外面的變數。</p><h2 id="let"><a href="#let" class="headerlink" title="let"></a>let</h2><p>與之相反，當我使用了<code>let</code>，則會變成如下：</p><ul><li>example 1：</li></ul><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xquery"><span class="hljs-keyword">if</span> <span class="hljs-built_in">(true</span>) &#123;<br>  <span class="hljs-keyword">let</span><span class="hljs-built_in"> name</span> = <span class="hljs-string">&#x27;Pitt&#x27;</span><br>&#125;<br>console.log<span class="hljs-built_in">(name</span>) // 印出<span class="hljs-built_in"> name</span> <span class="hljs-literal">is</span><span class="hljs-built_in"> not</span> defined<br></code></pre></td></tr></table></figure><ul><li>example 2：</li></ul><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs smali">let<span class="hljs-built_in"> array </span>= [2, 4, 6]<br>if (true) &#123;<br>  let<span class="hljs-built_in"> array </span>= [2]<br>&#125;<br>console.log(array) // 印出 [2, 4, 6]<br></code></pre></td></tr></table></figure><p>判斷式內的變數，僅在當中作用，而不會傳到外面進行污染。</p><h2 id="const"><a href="#const" class="headerlink" title="const"></a>const</h2><p>和<code>let</code>相同，都會受到<code>function</code>的侷限作用，但不同於<code>let</code>，一經宣告即不得變更。</p><ul><li>example：</li></ul><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">if</span> (<span class="hljs-keyword">true</span>) &#123;<br>  const <span class="hljs-type">text</span> = <span class="hljs-string">&#x27;game&#x27;</span><br>  <span class="hljs-type">text</span> = <span class="hljs-string">&#x27;new game&#x27;</span><br>  console.log(<span class="hljs-type">text</span>) // error Assignment <span class="hljs-keyword">to</span> <span class="hljs-keyword">constant</span> variable.<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="型別特性"><a href="#型別特性" class="headerlink" title="型別特性"></a>型別特性</h2><p>雖然在<code>JS</code>中，<code>array</code>、<code>object</code>兩個型別，在<code>const</code>的宣告下，一樣不可改變其本質：</p><ul><li>example：</li></ul><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs autoit"><span class="hljs-keyword">const</span> a = &#123; player: <span class="hljs-string">&#x27;Pitt&#x27;</span> &#125;<br>a = <span class="hljs-string">&#x27;Min&#x27;</span><br>console.<span class="hljs-built_in">log</span>(a) // error Assignment <span class="hljs-keyword">to</span> constant variable.<br></code></pre></td></tr></table></figure><p>但卻可以填充資料進入這兩種型別：</p><ul><li>example 1：</li></ul><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs autoit"><span class="hljs-keyword">const</span> a = &#123; player: <span class="hljs-string">&#x27;Pitt&#x27;</span> &#125;<br>a.newPlayer = <span class="hljs-string">&#x27;Min&#x27;</span><br>console.<span class="hljs-built_in">log</span>(a) // &#123; player: <span class="hljs-string">&quot;Pitt&quot;</span>, newPlayer: <span class="hljs-string">&quot;Min&quot;</span> &#125;<br></code></pre></td></tr></table></figure><ul><li>example 2：</li></ul><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">const</span> b =<span class="hljs-meta"> [1, 2, 3]</span><br><span class="hljs-attribute">b</span>.push(<span class="hljs-number">4</span>)<br><span class="hljs-attribute">console</span>.log(b) //<span class="hljs-meta"> [1, 2, 3, 4]</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>JavaScript</tag>
      
      <tag>ES6</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
